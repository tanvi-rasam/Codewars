Publish Subscribe Design Pattern eg- Redis

- Here, senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers, but instead categorize published messages into classes without knowledge of which subscribers, if any, there may be.
- Similarly, subscribers express interest in one or more classes and only receive messages that are of interest, without knowledge of which publishers, if any, there are.
- They communicate by another component named message broker which is known by both publisher and subscriber. The publisher will send the message to the message broker and the message broker will filtering and broadcasting the message to the right subscriber.

- This enables an application to announce events to multiple interested consumers asynchronously, without coupling the senders to the receivers.

Advantages-
- It increases scalability and improves responsiveness of the sender. The sender can quickly send a single message to the input channel, then return to its core processing responsibilities. The messaging infrastructure is responsible for ensuring messages are delivered to interested subscribers.

- It enables simpler integration between systems using different platforms, programming languages, or communication protocols, as well as between on-premises systems and applications running in the cloud.

- It improves testability. Channels can be monitored and messages can be inspected or logged as part of an overall integration test strategy.


Disadvantages/ Concerns-

- Security. Connecting to any message channel must be restricted by security policy to prevent eavesdropping by unauthorized users or applications.

- Message expiration. A message might have a limited lifetime. If it isn't processed within this period, it might no longer be relevant and should be discarded. A sender can specify an expiration time as part of the data in the message. A receiver can examine this information before deciding whether to perform the business logic associated with the message.

When to use this pattern

- An application needs to broadcast information to a significant number of consumers.
- An application can send information to consumers without requiring real-time responses from the consumers.





