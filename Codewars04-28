Q1]  For simplicity, you'll have to capitalize each word, check out how contractions are expected to be in the example below.

Your task is to convert strings to how they would be written by Jaden Smith. The strings are actual quotes from Jaden Smith, but they are not capitalized in the same way he originally typed them.

Example:

Not Jaden-Cased: "How can mirrors be real if our eyes aren't real"
Jaden-Cased:     "How Can Mirrors Be Real If Our Eyes Aren't Real"

Solution-
String.prototype.toJadenCase = function () {
  //...
  return this.split(' ').map(x => x[0].toUpperCase() + x.slice(1)).join(' ');
};


Q2] Check to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.

Examples input/output:

XO("ooxx") => true
XO("xooxx") => false
XO("ooxXm") => true
XO("zpzpzpp") => true // when no 'x' and 'o' is present should return true
XO("zzoo") => false

Solution-
function XO(str) {
//   str = str.toLowerCase().split('');
//   return str.filter(x => x === 'x').length === str.filter(x => x === 'o').length;
  
  return str.replace(/x/gi,'').length === str.replace(/o/gi,'').length;
}


Q3] In DNA strings, symbols "A" and "T" are complements of each other, as "C" and "G". You have function with one side of the DNA (string, except for Haskell); you need to get the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).

More similar exercise are found here http://rosalind.info/problems/list-view/ (source)

DNAStrand ("ATTGC") // return "TAACG"

DNAStrand ("GTAT") // return "CATA" 

Solutions
function DNAStrand(dna){
  //your code here
  var mapping ={
    'A' : 'T',
    'T' : 'A',
    'G' : 'C',
    'C' : 'G'
  }
  return dna.split('').map(x => mapping[x]).join('');
}

function DNAStrand(dna){
  //your code here
    var mapping ={
    'A' : 'T',
    'T' : 'A',
    'G' : 'C',
    'C' : 'G'
  }

    return dna.replace(/./g, (x) => mapping[x]);
}

Q4] In this kata you will create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out.

Example
filter_list([1,2,'a','b']) == [1,2]
filter_list([1,'a','b',0,15]) == [1,0,15]
filter_list([1,2,'aasf','1','123',123]) == [1,2,123]

Solution-
function filter_list(l) {
  // Return a new array with the strings filtered out
  return l.filter((x) => typeof x === 'number');
}
