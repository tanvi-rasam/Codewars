Q1] Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, containing distinct letters - each taken only once - coming from s1 or s2.

Examples:
a = "xyaabbbccccdefww"
b = "xxxxyyyyabklmopq"
longest(a, b) -> "abcdefklmopqwxy"

a = "abcdefghijklmnopqrstuvwxyz"
longest(a, a) -> "abcdefghijklmnopqrstuvwxyz"

Solutions-
function longest(s1, s2) {
  // your code
  return Array.from(new Set(s1 + s2)).sort().join('');
}

function longest(s1, s2) {
  return [...new Set(s1 + s2)].sort().join('');
}

Q2] Given the triangle of consecutive odd numbers:

             1
          3     5
       7     9    11
   13    15    17    19
21    23    25    27    29
...
Calculate the sum of the numbers in the nth row of this triangle (starting at index 1) e.g.:

rowSumOddNumbers(1); // 1
rowSumOddNumbers(2); // 3 + 5 = 8

Solution-
function rowSumOddNumbers(n) {
  start_num = (n - 1) * n + 1;
  end_num = n * (n + 1) + 1;
  sum = 0;
  for (var i = start_num; i < end_num; i+=2) {
    sum+=i;
  }
  return sum;
}

function rowSumOddNumbers(n) {
	// TODO
  return Math.pow(n,3);
}


Q3] ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits.

If the function is passed a valid PIN string, return true, else return false.

Examples
"1234"   -->  true
"12345"  -->  false
"a234"   -->  false

Solution-
function validatePIN (pin) {
  //return true or false
return /^(\d{4}|\d{6})$/.test(pin)
}

Q4] In a factory a printer prints labels for boxes. For one kind of boxes the printer has to use colors which, for the sake of simplicity, are named with letters from a to m.

The colors used by the printer are recorded in a control string. For example a "good" control string would be aaabbbbhaijjjm meaning that the printer used three times color a, four times color b, one time color h then one time color a...

Sometimes there are problems: lack of colors, technical malfunction and a "bad" control string is produced e.g. aaaxbbbbyyhwawiwjjjwwm with letters not from a to m.

You have to write a function printer_error which given a string will return the error rate of the printer as a string representing a rational whose numerator is the number of errors and the denominator the length of the control string. Don't reduce this fraction to a simpler expression.

The string has a length greater or equal to one and contains only letters from ato z.

Examples:
s="aaabbbbhaijjjm"
error_printer(s) => "0/14"

s="aaaxbbbbyyhwawiwjjjwwm"
error_printer(s) => "8/22"

Solution- 
function printerError(s) {
    // your code
  error_chars = s.match(/[n-z]/g)
  return error_chars ? `${error_chars.length}/${s.length}` : `0/${s.length}`
}

function printerError(s) {
    // your code
    return s.replace(/[a-m]/gi,"").length + '/' + s.length;
}
