Q1] Write a function that takes an array of strings as an argument and returns a sorted array containing the same strings, ordered from shortest to longest.

For example, if this array were passed as an argument:

["Telescopes", "Glasses", "Eyes", "Monocles"]

Your function would return the following array:

["Eyes", "Glasses", "Monocles", "Telescopes"]

All of the strings in the array passed to your function will be different lengths, so you will not have to decide how to order multiple strings of the same length.

Solution-
function sortByLength (array) {
  return array.sort((str1,str2) => str1.length - str2.length);
};

Q2] As a part of this Kata, you need to create a function that when provided with a triplet, returns the index of the numerical element that lies between the other two elements.

The input to the function will be an array of three distinct numbers (Haskell: a tuple).

For example:

gimme([2, 3, 1]) => 0
2 is the number that fits between 1 and 3 and the index of 2 in the input array is 0.

Another example (just to make sure it is clear):

gimme([5, 10, 14]) => 1

Solution-
var gimme = function (inputArray) {
   return inputArray.indexOf([...inputArray].sort((a,b) => a - b)[1]);
};

Q3] Count the number of divisors of a positive integer n.

Random tests go up to n = 500000.

Examples
divisors(4)  = 3  // 1, 2, 4
divisors(5)  = 2  // 1, 5
divisors(12) = 6  // 1, 2, 3, 4, 6, 12
divisors(30) = 8  // 1, 2, 3, 5, 6, 10, 15, 30

Solution-
function getDivisorsCnt(n){
  return [...new Array(Math.floor(n/2 + 1)).keys()].filter(x => n % x === 0).length + 1;
}

Q4] Given a Divisor and a Bound , Find the largest integer N , Such That ,

Conditions :
N is divisible by divisor

N is less than or equal to bound

N is greater than 0.

Solution-
function maxMultiple(divisor, bound){
  return bound % divisor !== 0 ? [...new Array(bound + 1).keys()].filter(x => x % divisor === 0).slice(-1)[0] : bound
}

function maxMultiple(divisor, bound){
  return bound - bound % divisor;
}
