Q1] The goal of this exercise is to convert a string to a new string where each character in the new string is "(" if that character appears only once in the original string, or ")" if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.

Examples
"din"      =>  "((("
"recede"   =>  "()()()"
"Success"  =>  ")())())"
"(( @"     =>  "))((" 

Solution-

function duplicateEncode(word){
  var dict = {};
  var wordToProcess = word.toUpperCase().split('');
  
  wordToProcess.forEach(x => dict[x] = dict[x] ? dict[x] + 1 : 1);
  
  return wordToProcess.map(x => dict[x] > 1 ? ')' : '(').join('');
  
  
}


function duplicateEncode(word){
  return word
      .toLowerCase()
      .split('')
      .map((x, i, w) => w.indexOf(x) == w.lastIndexOf(x) ? '(' : ')')
      .join('');
}

Q2] Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.

It should remove all values from list a, which are present in list b keeping their order.

arrayDiff([1,2],[1]) == [2]
If a value is present in b, all of its occurrences must be removed from the other:

arrayDiff([1,2,2,2,3],[2]) == [1,3]

Solution-
function arrayDiff(a, b) {
  return a.filter(x => !b.includes(x));
}

Q3] Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.

Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case

Solution-
var countBits = function(n) {
  var count = 0;
  while (n) {
    if (n % 2 !== 0) {
      count += 1
    }
    n = Math.floor(n / 2);
  }
  return count;
};

var countBits = function(n) {
  return n.toString(2).replace(/0/g,'').length;
};
