Q1] You live in the city of Cartesia where all roads are laid out in a perfect grid. You arrived ten minutes too early to an appointment, so you decided to take the opportunity to go for a short walk. The city provides its citizens with a Walk Generating App on their phones -- everytime you press the button it sends you an array of one-letter strings representing directions to walk (eg. ['n', 's', 'w', 'e']). You always walk only a single block for each letter (direction) and you know it takes you one minute to traverse one city block, so create a function that will return true if the walk the app gives you will take you exactly ten minutes (you don't want to be early or late!) and will, of course, return you to your starting point. Return false otherwise.

Solution-

function isValidWalk(walk) {
  if (walk.length !== 10 ) {
    return false;
  }
  
  var direction = {
    'n': 0,
    's': 0,
    'e': 0,
    'w': 0
  }
  
  walk.map(x => direction[x] += 1);
  
  return direction['n'] === direction['s'] && direction['e'] === direction['w']; 
}

Q2]  Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.

Example:
createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) // => returns "(123) 456-7890"
The returned format must be correct in order to complete this challenge.
Don't forget the space after the closing parentheses!

Solution
function createPhoneNumber(numbers){
  numbers[0] = `(${numbers[0]}`;
  numbers[2] = `${numbers[2]}) `;
  numbers[5] = `${numbers[5]}-`;
  return numbers.join('');
}

Q3] In this kata you are required to, given a string, replace every letter with its position in the alphabet.

If anything in the text isn't a letter, ignore it and don't return it.

"a" = 1, "b" = 2, etc.

Example
alphabetPosition("The sunset sets at twelve o' clock.")
Should return "20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11" (as a string)

Solution

function alphabetPosition(text) {
  return text
          .split('')
          .filter(x => x.match(/[a-z]/i))
          .map(x => x.toLowerCase().charCodeAt() - 96).join(' ');
}




