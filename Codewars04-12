Q1] Can you find the needle in the haystack?

Write a function findNeedle() that takes an array full of junk but containing one "needle"

After your function finds the needle it should return a message (as a string) that says:

"found the needle at position " plus the index it found the needle, so:

findNeedle(['hay', 'junk', 'hay', 'hay', 'moreJunk', 'needle', 'randomJunk'])
should return "found the needle at position 5"

Solutions:

function findNeedle(haystack) {
  // 1:
    return 'found the needle at position '+ haystack.indexOf('needle');
  
  // 2:
  return `found the needle at position ${haystack.indexOf('needle')}`;
}


Q2] Given an array of integers.

Return an array, where the first element is the count of positives numbers and the second element is sum of negative numbers.

If the input array is empty or null, return an empty array.

Example
For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15], you should return [10, -65].

Solutions-

function countPositivesSumNegatives(input) {
   //1:
   
   if (!input || !input.length){
     return [];
   }
   return input.reduce((acc,currVal) => currVal <= 0 ? [acc[0],acc[1] += currVal] : [acc[0] += 1,acc[1]] ,[0,0])
   
//2: Complexity n+n
	return input && input.length ? [
	input.filter(i => i > 0).length,
	input.reduce((a,c) => c < 0 ? a + c : a, 0 )
	] : [];
}

Q3] Given an array of integers, return a new array with each value doubled.

For example:

[1, 2, 3] --> [2, 4, 6]

For the beginner, try to use the map method - it comes in very handy quite a lot so is a good one to know.

Solutions:
function maps(x){
  return x.map(x1 => x1*2);
}
