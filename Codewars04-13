Q1] Given a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.

invert([1,2,3,4,5]) == [-1,-2,-3,-4,-5]
invert([1,-2,3,-4,5]) == [-1,2,-3,4,-5]
invert([]) == []
You can assume that all values are integers. Do not mutate the input array/list.

Solution-
function invert(array) {
   return array.map(num => -num);
}

Q2] We need a function that can transform a string into a number. What ways of achieving this do you know?

Note: Don't worry, all inputs will be strings, and every string is a perfectly valid representation of an integral number.

Examples
"1234" --> 1234
"605"  --> 605
"1405" --> 1405
"-7" --> -7

Solutions:

var stringToNumber = function(str){
  // 1:
  return parseInt(str);
 
  //2:
  //return Number(str);
  
  //3:
  return +str;
}

Q3] Sum all the numbers of the array (in F# and Haskell you get a list) except the highest and the lowest element (the value, not the index!).
(The highest/lowest element is respectively only one element at each edge, even if there are more than one with the same value!)

Example:

{ 6, 2, 1, 8, 10 } => 16
{ 1, 1, 11, 2, 3 } => 6

If array is empty, null or None, or if only 1 Element exists, return 0.

Solutions-

function sumArray(array) {
   // 1:
  return array && array.length > 1 ? array.sort((a,b) => a - b).slice(1,-1).reduce((a,c) => a + c,0) : 0;
  
  //2:
  return array && array.length > 1 
    ? array.reduce((a,c) => a + c) - Math.min(...array) - Math.max(...array) 
    : 0
}
