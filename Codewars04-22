Q1 ] f you can't sleep, just count sheep!!

Task:
Given a non-negative integer, 3 for example, return a string with a murmur: "1 sheep...2 sheep...3 sheep...". Input will always be valid, i.e. no negative integers.

Solutions-
var countSheep = function (num){
  //your code here
  return num ? countSheep(num -1) + num + ' sheep...' : '';
  
  return [...Array(num).keys()].map(x => `${x + 1} sheep...`).join('');
}

Q2] Your task is to find the first element of an array that is not consecutive.

By not consecutive we mean not exactly 1 larger than the previous element of the array.

E.g. If we have an array [1,2,3,4,6,7,8] then 1 then 2 then 3 then 4 are all consecutive but 6 is not, so that's the first non-consecutive number.

If the whole array is consecutive then return null2.

The array will always have at least 2 elements1 and all elements will be numbers. The numbers will also all be unique and in ascending order. The numbers could be positive or negative and the first non-consecutive could be either too!

Solutions-

function firstNonConsecutive (arr) {
  for(var i = 1; i < arr.length; i++) {
    if ((arr[i-1] + 1) !== arr[i]) {
      return arr[i];
    }
  }
  return null;
}

function firstNonConsecutive (arr) {
  return arr.length === 1 ? null : arr[0] + 1 !== arr[1] ? arr[1] : firstNonConsecutive(arr.slice(1));
}

7kyu- 

Q3] Return the number (count) of vowels in the given string.

We will consider a, e, i, o, u as vowels for this Kata (but not y).

The input string will only consist of lower case letters and/or spaces.

Solutions-
function getCount(str) {
  return str.split('').filter(x => ['a','e','i','o','u'].includes(x)).length;
  
  return (str.match(/[aeiou]/ig) || []).length;
}

Q4] This time no story, no theory. The examples below show you how to write function accum:

Examples:

accum("abcd") -> "A-Bb-Ccc-Dddd"
accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
accum("cwAt") -> "C-Ww-Aaa-Tttt"

Solution-
function accum(s) {
  return s.split('').map((x,index) => x.toUpperCase() + x.toLowerCase().repeat(index)).join('-');
}


